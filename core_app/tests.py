import os
from pathlib import Path

import dotenv
import pytest
import yaml
from django.conf import settings
from pytest_django.asserts import assertContains, assertRedirects, assertTemplateUsed


# Implement a no-op so that the real sqlite db is used for tests during refactoring
@pytest.fixture(scope="session")
def django_db_setup():
    settings.DATABASES["default"] = {
        "ENGINE": "django.db.backends.mysql",
        "HOST": "db.example.com",
        "NAME": "external_db",
    }


@pytest.fixture(scope="session", autouse=True)
def load_env():
    dotenv.load_dotenv()


@pytest.fixture(autouse=True)
def login(client, db):
    assert client.login(username="siraj", password=os.getenv("PASSWORD"))


def describe_safety_net_for_refactoring():
    """
    We generate a reference file that will store all the stats generated by the current program so that each time we refactor,
    we can check against the reference file to ensure that the refactoring did not break the algorithm.
    Since the algorithm regenerates the due pages data every day, this file needs to be regenerated every day.
    Then we want to store the ouput of the algorithm(next_interval and scheduled_due_date) into the DB directly
    so that we can fetch it directly from DB rather than processing all the revisions for all the pages every time
    either the Due pages or All pages are visited. After this is done, then this test and the yaml file can be retired.
    """

    @pytest.mark.skipif(Path("all_pages.yaml").exists(), reason="CheckFile")
    def test_create_oracle_for_all_pages(client, db):
        response = client.get("/student/1/all/")
        pages_all = response.context["pages_all"]

        with open("all_pages.yaml", "w") as file:
            yaml.dump(pages_all, file)

    @pytest.fixture()
    def all_pages_oracle():
        with open("all_pages.yaml") as file:
            return yaml.load(file, Loader=yaml.SafeLoader)

    @pytest.mark.slow
    def compare_with_oracle(all_pages_oracle, client, db):
        response = client.get("/student/1/all/")
        assert response.context["pages_all"] == all_pages_oracle

    def run_the_hack_for_safwan_hanan(client):
        response = client.get("/student/3/due/")
        assertTemplateUsed(response, "due.html")
        assert "pages_due" in response.context

        response = client.get("/student/4/due/")
        assertTemplateUsed(response, "due.html")
        assert "pages_due" in response.context


def describe_visit_all_pages():
    def home(client):
        response = client.get("/")
        assertTemplateUsed(response, "home.html")
        assert "students" in response.context

    def due_pages(client):
        response = client.get("/student/1/due/")
        assertTemplateUsed(response, "due.html")
        assert "pages_due" in response.context

    def due_page_entry(client):
        response = client.get("/student/1/due/")
        first_due_page = list(response.context["pages_due"].keys())[0]

        due_page_url = f"/student/1/page/{first_due_page}/1/"
        response = client.get(due_page_url)
        assertTemplateUsed(response, "page_entry.html")
        assertContains(response, f"Siraj - Page {first_due_page}")

        response = client.post(
            due_page_url,
            {"word_mistakes": 0, "line_mistakes": 0, "difficulty_level": "o"},
        )
        assert response.status_code == 302

    def new_page_entry(client):
        response = client.get("/student/1/new/", {"page": "253"})
        assert response.status_code == 302

        response = client.post(
            "/student/1/page/253/0/",
            {"word_mistakes": 0, "line_mistakes": 0, "difficulty_level": "o"},
        )
        assert response.status_code == 302

    def access_student_of_another_account(client):
        response = client.get("/student/7/due/")
        assert response.status_code == 403

        response = client.get("/student/7/all/")
        assert response.status_code == 403

        response = client.get("/student/7/page/3/1/")
        assert response.status_code == 403
